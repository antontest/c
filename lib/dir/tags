!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
F_BLK	bak/dir.h	/^    F_BLK           ,$/;"	e	enum:file_type
F_BLK	dir.h	/^    F_BLK           ,$/;"	e	enum:file_type
F_CHR	bak/dir.h	/^    F_CHR           ,$/;"	e	enum:file_type
F_CHR	dir.h	/^    F_CHR           ,$/;"	e	enum:file_type
F_DIR	bak/dir.h	/^    F_DIR           ,$/;"	e	enum:file_type
F_DIR	dir.h	/^    F_DIR           ,$/;"	e	enum:file_type
F_FIFO	bak/dir.h	/^    F_FIFO          ,$/;"	e	enum:file_type
F_FIFO	dir.h	/^    F_FIFO          ,$/;"	e	enum:file_type
F_LNK	bak/dir.h	/^    F_LNK           ,$/;"	e	enum:file_type
F_LNK	dir.h	/^    F_LNK           ,$/;"	e	enum:file_type
F_REG	bak/dir.h	/^    F_REG       = 0 ,$/;"	e	enum:file_type
F_REG	dir.h	/^    F_REG       = 0 ,$/;"	e	enum:file_type
F_SOCK	bak/dir.h	/^    F_SOCK$/;"	e	enum:file_type
F_SOCK	dir.h	/^    F_SOCK$/;"	e	enum:file_type
F_UNKNOWN	bak/dir.h	/^    F_UNKNOWN   = -1, $/;"	e	enum:file_type
F_UNKNOWN	dir.h	/^    F_UNKNOWN   = -1, $/;"	e	enum:file_type
_DIR_H__	bak/dir.h	2;"	d
_DIR_H__	dir.h	2;"	d
file_is_exist	bak/dir.c	/^int file_is_exist(const char *pathname)$/;"	f	signature:(const char *pathname)
file_is_exist	bak/dir.h	/^int file_is_exist(const char *pathname);$/;"	p	signature:(const char *pathname)
file_is_exist	dir.c	/^int file_is_exist(const char *pathname)$/;"	f	signature:(const char *pathname)
file_is_exist	dir.h	/^int file_is_exist(const char *pathname);$/;"	p	signature:(const char *pathname)
file_type	bak/dir.h	/^typedef enum file_type {$/;"	g
file_type	bak/dir.h	/^} file_type;$/;"	t	typeref:enum:file_type
file_type	dir.h	/^typedef enum file_type {$/;"	g
file_type	dir.h	/^} file_type;$/;"	t	typeref:enum:file_type
get_dir_size	bak/dir.c	/^int get_dir_size(const char *pathname)$/;"	f	signature:(const char *pathname)
get_dir_size	bak/dir.h	/^int get_dir_size(const char *pathname);$/;"	p	signature:(const char *pathname)
get_dir_size	dir.c	/^int get_dir_size(const char *pathname)$/;"	f	signature:(const char *pathname)
get_dir_size	dir.h	/^int get_dir_size(const char *pathname);$/;"	p	signature:(const char *pathname)
get_file_size	bak/dir.c	/^int get_file_size(const char *pathname)$/;"	f	signature:(const char *pathname)
get_file_size	bak/dir.h	/^int get_file_size(const char *pathname);$/;"	p	signature:(const char *pathname)
get_file_size	dir.c	/^int get_file_size(const char *pathname)$/;"	f	signature:(const char *pathname)
get_file_size	dir.h	/^int get_file_size(const char *pathname);$/;"	p	signature:(const char *pathname)
get_file_type	bak/dir.c	/^file_type get_file_type(const char *pathname)$/;"	f	signature:(const char *pathname)
get_file_type	bak/dir.h	/^file_type get_file_type(const char *pathname);$/;"	p	signature:(const char *pathname)
get_file_type	dir.c	/^file_type get_file_type(const char *pathname)$/;"	f	signature:(const char *pathname)
get_file_type	dir.h	/^file_type get_file_type(const char *pathname);$/;"	p	signature:(const char *pathname)
make_dir	bak/dir.c	/^int make_dir(char *pathname, mode_t mode)$/;"	f	signature:(char *pathname, mode_t mode)
make_dir	bak/dir.h	/^int make_dir(char *pathname, mode_t mode);$/;"	p	signature:(char *pathname, mode_t mode)
make_dir	dir.c	/^int make_dir(char *pathname, mode_t mode)$/;"	f	signature:(char *pathname, mode_t mode)
make_dir	dir.h	/^int make_dir(char *pathname, mode_t mode);$/;"	p	signature:(char *pathname, mode_t mode)
print_dir	bak/dir.c	/^void print_dir(const char *pathname)$/;"	f	signature:(const char *pathname)
print_dir	bak/dir.h	/^void print_dir(const char *pathname);$/;"	p	signature:(const char *pathname)
print_dir	dir.c	/^void print_dir(const char *pathname)$/;"	f	signature:(const char *pathname)
print_dir	dir.h	/^void print_dir(const char *pathname);$/;"	p	signature:(const char *pathname)
remove_dir	dir.c	/^int remove_dir(const char *pathname)$/;"	f	signature:(const char *pathname)
remove_dir	dir.h	/^int remove_dir(const char *pathname);$/;"	p	signature:(const char *pathname)
remove_file	dir.c	/^int remove_file(const char *pathname)$/;"	f	signature:(const char *pathname)
remove_file	dir.h	/^int remove_file(const char *pathname);$/;"	p	signature:(const char *pathname)
