!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
MACRO_STR	socket_base.h	28;"	d
__SOCKET_BASE_H__	socket_base.h	2;"	d
add_socket_to_membership	socket_base.c	/^int add_socket_to_membership(int fd, struct ip_mreq *mrq)$/;"	f	signature:(int fd, struct ip_mreq *mrq)
add_socket_to_membership	socket_base.h	/^int add_socket_to_membership(int fd, struct ip_mreq *mrq);$/;"	p	signature:(int fd, struct ip_mreq *mrq)
drop_socket_from_membership	socket_base.c	/^int drop_socket_from_membership(int fd, struct ip_mreq *mrq)$/;"	f	signature:(int fd, struct ip_mreq *mrq)
drop_socket_from_membership	socket_base.h	/^int drop_socket_from_membership(int fd, struct ip_mreq *mrq);$/;"	p	signature:(int fd, struct ip_mreq *mrq)
error_die	socket_base.c	/^static void error_die(const char *sc)$/;"	f	file:	signature:(const char *sc)
get_can_read_bytes	socket_base.c	/^int get_can_read_bytes(int fd)$/;"	f	signature:(int fd)
get_can_read_bytes	socket_base.h	/^int get_can_read_bytes(int fd);$/;"	p	signature:(int fd)
get_ifname	socket_base.c	/^int get_ifname(char *ifname)$/;"	f	signature:(char *ifname)
get_ifname	socket_base.h	/^int get_ifname(char *ifname);$/;"	p	signature:(char *ifname)
get_interface_index	socket_base.c	/^int get_interface_index(int fd, struct ifreq *req)$/;"	f	signature:(int fd, struct ifreq *req)
get_interface_index	socket_base.h	/^int get_interface_index(int fd, struct ifreq *req);$/;"	p	signature:(int fd, struct ifreq *req)
get_ip	socket_base.c	/^int get_ip(char ip[])$/;"	f	signature:(char ip[])
get_ip	socket_base.h	/^int get_ip(char ip[]);$/;"	p	signature:(char ip[])
get_ip_by_ifname	socket_base.c	/^int get_ip_by_ifname(const char *ifname, char *ip)$/;"	f	signature:(const char *ifname, char *ip)
get_ip_by_ifname	socket_base.h	/^int get_ip_by_ifname(const char *ifname, char *ip);$/;"	p	signature:(const char *ifname, char *ip)
get_socket_recv_buf	socket_base.c	/^int get_socket_recv_buf(int fd)$/;"	f	signature:(int fd)
get_socket_recv_buf	socket_base.h	/^int get_socket_recv_buf(int fd);$/;"	p	signature:(int fd)
get_socket_recv_timeout	socket_base.c	/^int get_socket_recv_timeout(int fd)$/;"	f	signature:(int fd)
get_socket_recv_timeout	socket_base.h	/^int get_socket_recv_timeout(int fd);$/;"	p	signature:(int fd)
get_socket_send_buf	socket_base.c	/^int get_socket_send_buf(int fd)$/;"	f	signature:(int fd)
get_socket_send_buf	socket_base.h	/^int get_socket_send_buf(int fd);$/;"	p	signature:(int fd)
get_socket_send_timeout	socket_base.c	/^int get_socket_send_timeout(int fd)$/;"	f	signature:(int fd)
get_socket_send_timeout	socket_base.h	/^int get_socket_send_timeout(int fd);$/;"	p	signature:(int fd)
get_socket_type	socket_base.c	/^int get_socket_type(int fd)$/;"	f	signature:(int fd)
get_socket_type	socket_base.h	/^int get_socket_type(int fd);$/;"	p	signature:(int fd)
get_socket_type_str	socket_base.c	/^char* get_socket_type_str(int fd)$/;"	f	signature:(int fd)
get_socket_type_str	socket_base.h	/^char* get_socket_type_str(int fd);$/;"	p	signature:(int fd)
get_subnet_addr	socket_base.c	/^char * get_subnet_addr(const char *ip, const char *mask)$/;"	f	signature:(const char *ip, const char *mask)
get_subnet_addr	socket_base.h	/^char * get_subnet_addr(const char *ip, const char *mask);$/;"	p	signature:(const char *ip, const char *mask)
inet_addr_init	socket_base.c	/^void inet_addr_init(struct sockaddr_in *addr, const char *ip, u_short port)$/;"	f	signature:(struct sockaddr_in *addr, const char *ip, u_short port)
inet_addr_init	socket_base.h	/^void inet_addr_init(struct sockaddr_in *addr, const char *ip, u_short port);$/;"	p	signature:(struct sockaddr_in *addr, const char *ip, u_short port)
inet_socket_startup	socket_base.c	/^int inet_socket_startup(int domain, int type, struct sockaddr_in *addr, \\$/;"	f	signature:(int domain, int type, struct sockaddr_in *addr, \ const char *ip, u_short port, int is_ser)
inet_socket_startup	socket_base.h	/^int inet_socket_startup(int domain, int type, struct sockaddr_in *addr, \\$/;"	p	signature:(int domain, int type, struct sockaddr_in *addr, \ const char *ip, u_short port, int is_ser)
is_big_endian	socket_base.c	/^int is_big_endian()$/;"	f
is_big_endian	socket_base.h	/^int is_big_endian();$/;"	p
local_addr_init	socket_base.c	/^void local_addr_init(struct sockaddr_un *addr, const char *path)$/;"	f	signature:(struct sockaddr_un *addr, const char *path)
local_addr_init	socket_base.h	/^void local_addr_init(struct sockaddr_un *addr, const char *path);$/;"	p	signature:(struct sockaddr_un *addr, const char *path)
local_socket_startup	socket_base.c	/^int local_socket_startup(int domain, int type, const char *path, int is_ser)$/;"	f	signature:(int domain, int type, const char *path, int is_ser)
local_socket_startup	socket_base.h	/^int local_socket_startup(int domain, int type, const char *path, int is_ser);$/;"	p	signature:(int domain, int type, const char *path, int is_ser)
make_listen_socket_reuseable	socket_base.c	/^int make_listen_socket_reuseable(int fd)$/;"	f	signature:(int fd)
make_listen_socket_reuseable	socket_base.h	/^int make_listen_socket_reuseable(int fd);$/;"	p	signature:(int fd)
make_socket_block	socket_base.c	/^int make_socket_block(int fd)$/;"	f	signature:(int fd)
make_socket_block	socket_base.h	/^int make_socket_block(int fd);$/;"	p	signature:(int fd)
make_socket_broadcast	socket_base.c	/^int make_socket_broadcast(int fd, int on)$/;"	f	signature:(int fd, int on)
make_socket_broadcast	socket_base.h	/^int make_socket_broadcast(int fd, int on);$/;"	p	signature:(int fd, int on)
make_socket_close_action	socket_base.c	/^int make_socket_close_action(int fd, int is_on, int tm_s)$/;"	f	signature:(int fd, int is_on, int tm_s)
make_socket_close_action	socket_base.h	/^int make_socket_close_action(int fd, int is_on, int tm_s);$/;"	p	signature:(int fd, int is_on, int tm_s)
make_socket_closenexec	socket_base.c	/^int make_socket_closenexec(int fd)$/;"	f	signature:(int fd)
make_socket_closenexec	socket_base.h	/^int make_socket_closenexec(int fd);$/;"	p	signature:(int fd)
make_socket_keep_alive	socket_base.c	/^int make_socket_keep_alive(int fd)$/;"	f	signature:(int fd)
make_socket_keep_alive	socket_base.h	/^int make_socket_keep_alive(int fd);$/;"	p	signature:(int fd)
make_socket_multicast_loop	socket_base.c	/^int make_socket_multicast_loop(int fd, int on)$/;"	f	signature:(int fd, int on)
make_socket_multicast_loop	socket_base.h	/^int make_socket_multicast_loop(int fd, int on);$/;"	p	signature:(int fd, int on)
make_socket_multicast_ttl	socket_base.c	/^int make_socket_multicast_ttl(int fd, int ttl)$/;"	f	signature:(int fd, int ttl)
make_socket_multicast_ttl	socket_base.h	/^int make_socket_multicast_ttl(int fd, int ttl);$/;"	p	signature:(int fd, int ttl)
make_socket_nonblock	socket_base.c	/^int make_socket_nonblock(int fd)$/;"	f	signature:(int fd)
make_socket_nonblock	socket_base.h	/^int make_socket_nonblock(int fd);$/;"	p	signature:(int fd)
make_socket_promisc	socket_base.c	/^int make_socket_promisc(const char *ifname, int fd, int on)$/;"	f	signature:(const char *ifname, int fd, int on)
make_socket_promisc	socket_base.h	/^int make_socket_promisc(const char *ifname, int fd, int on);$/;"	p	signature:(const char *ifname, int fd, int on)
make_socket_recv_timeout	socket_base.c	/^int make_socket_recv_timeout(int fd, int tm_ms)$/;"	f	signature:(int fd, int tm_ms)
make_socket_recv_timeout	socket_base.h	/^int make_socket_recv_timeout(int fd, int tm_ms);$/;"	p	signature:(int fd, int tm_ms)
make_socket_send_timeout	socket_base.c	/^int make_socket_send_timeout(int fd, int tm_ms)$/;"	f	signature:(int fd, int tm_ms)
make_socket_send_timeout	socket_base.h	/^int make_socket_send_timeout(int fd, int tm_ms);$/;"	p	signature:(int fd, int tm_ms)
mask_to_bits	socket_base.c	/^int mask_to_bits(const char *mask)$/;"	f	signature:(const char *mask)
mask_to_bits	socket_base.h	/^int mask_to_bits(const char *mask);$/;"	p	signature:(const char *mask)
match_ip	socket_base.c	/^int match_ip(const char *ip)$/;"	f	signature:(const char *ip)
match_ip	socket_base.h	/^int match_ip(const char *ip);$/;"	p	signature:(const char *ip)
set_socket_recv_buf	socket_base.c	/^int set_socket_recv_buf(int fd, int buf_size)$/;"	f	signature:(int fd, int buf_size)
set_socket_recv_buf	socket_base.h	/^int set_socket_recv_buf(int fd, int buf_size);$/;"	p	signature:(int fd, int buf_size)
set_socket_send_buf	socket_base.c	/^int set_socket_send_buf(int fd, int buf_size)$/;"	f	signature:(int fd, int buf_size)
set_socket_send_buf	socket_base.h	/^int set_socket_send_buf(int fd, int buf_size);$/;"	p	signature:(int fd, int buf_size)
socket_accept	socket_base.c	/^int socket_accept(int fd)$/;"	f	signature:(int fd)
socket_accept	socket_base.h	/^int socket_accept(int fd);$/;"	p	signature:(int fd)
socket_addr_recvfrom	socket_base.c	/^int socket_addr_recvfrom(int fd, void *buf, int size, void *addr)$/;"	f	signature:(int fd, void *buf, int size, void *addr)
socket_addr_recvfrom	socket_base.h	/^int socket_addr_recvfrom(int fd, void *buf, int size, void *addr);$/;"	p	signature:(int fd, void *buf, int size, void *addr)
socket_addr_sendto	socket_base.c	/^int socket_addr_sendto(int fd, void *buf, int size, void *addr)$/;"	f	signature:(int fd, void *buf, int size, void *addr)
socket_addr_sendto	socket_base.h	/^int socket_addr_sendto(int fd, void *buf, int size, void *addr);$/;"	p	signature:(int fd, void *buf, int size, void *addr)
socket_bind	socket_base.c	/^int socket_bind(int fd, struct sockaddr *addr)$/;"	f	signature:(int fd, struct sockaddr *addr)
socket_bind	socket_base.h	/^int socket_bind(int fd, struct sockaddr *addr);$/;"	p	signature:(int fd, struct sockaddr *addr)
socket_close	socket_base.c	/^int socket_close(int fd)$/;"	f	signature:(int fd)
socket_close	socket_base.h	/^int socket_close(int fd);$/;"	p	signature:(int fd)
socket_connect	socket_base.c	/^int socket_connect(int fd, void *cli_addr)$/;"	f	signature:(int fd, void *cli_addr)
socket_connect	socket_base.h	/^int socket_connect(int fd, void *cli_addr);$/;"	p	signature:(int fd, void *cli_addr)
socket_create	socket_base.c	/^int socket_create(int domain, int type)$/;"	f	signature:(int domain, int type)
socket_create	socket_base.h	/^int socket_create(int domain, int type);$/;"	p	signature:(int domain, int type)
socket_listen	socket_base.c	/^int socket_listen(int fd, int backlog)$/;"	f	signature:(int fd, int backlog)
socket_listen	socket_base.h	/^int socket_listen(int fd, int backlog);$/;"	p	signature:(int fd, int backlog)
socket_recv	socket_base.c	/^int socket_recv(int fd, void *buf, int size)$/;"	f	signature:(int fd, void *buf, int size)
socket_recv	socket_base.h	/^int socket_recv(int fd, void *buf, int size);$/;"	p	signature:(int fd, void *buf, int size)
socket_recvfrom	socket_base.c	/^int socket_recvfrom(int fd, void *buf, int size, const char *ip, int port)$/;"	f	signature:(int fd, void *buf, int size, const char *ip, int port)
socket_recvfrom	socket_base.h	/^int socket_recvfrom(int fd, void *buf, int size, const char *ip, int port);$/;"	p	signature:(int fd, void *buf, int size, const char *ip, int port)
socket_send	socket_base.c	/^int socket_send(int fd, void *buf, int size)$/;"	f	signature:(int fd, void *buf, int size)
socket_send	socket_base.h	/^int socket_send(int fd, void *buf, int size);$/;"	p	signature:(int fd, void *buf, int size)
socket_sendto	socket_base.c	/^int socket_sendto(int fd, void *buf, int size, const char *ip, int port)$/;"	f	signature:(int fd, void *buf, int size, const char *ip, int port)
socket_sendto	socket_base.h	/^int socket_sendto(int fd, void *buf, int size, const char *ip, int port);$/;"	p	signature:(int fd, void *buf, int size, const char *ip, int port)
socket_time_connect	socket_base.c	/^int socket_time_connect(int fd, void *cli_addr, int tm_ms)$/;"	f	signature:(int fd, void *cli_addr, int tm_ms)
socket_time_connect	socket_base.h	/^int socket_time_connect(int fd, void *cli_addr, int tm_ms);$/;"	p	signature:(int fd, void *cli_addr, int tm_ms)
socket_time_recv	socket_base.c	/^int socket_time_recv(int fd, void *buf, int size, int time_ms)$/;"	f	signature:(int fd, void *buf, int size, int time_ms)
socket_time_recv	socket_base.h	/^int socket_time_recv(int fd, void *buf, int size, int time_ms);$/;"	p	signature:(int fd, void *buf, int size, int time_ms)
socket_time_send	socket_base.c	/^int socket_time_send(int fd, void *buf, int size, int time_ms)$/;"	f	signature:(int fd, void *buf, int size, int time_ms)
socket_time_send	socket_base.h	/^int socket_time_send(int fd, void *buf, int size, int time_ms);$/;"	p	signature:(int fd, void *buf, int size, int time_ms)
socket_type	socket_base.h	/^static struct socket_type {$/;"	s
socket_type	socket_base.h	/^} socket_type[] = {$/;"	v	typeref:struct:socket_type
socket_type::type_macro	socket_base.h	/^    int type_macro;$/;"	m	struct:socket_type	access:public
socket_type::type_name	socket_base.h	/^    char *type_name;$/;"	m	struct:socket_type	access:public
type_macro	socket_base.h	/^    int type_macro;$/;"	m	struct:socket_type	access:public
type_name	socket_base.h	/^    char *type_name;$/;"	m	struct:socket_type	access:public
